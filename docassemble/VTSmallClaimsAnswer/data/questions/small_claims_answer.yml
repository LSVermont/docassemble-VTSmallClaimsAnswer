---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.VTSharedYMLFile:VTSharedYMLFile.yml
---
metadata:
  title: >-
    Small claims answer
  short title: >-
    Small claims answer
  description: |-
    This interview helps someone in Vermont respond to a small claims case.
  can_I_use_this_form: |
    If you are have been sued in small claims court, you can use this interview to respond.
  before_you_start: |
    This interview will help you respond to a small claims case.
    
    Before you get started, please gather:
    
    1. 
    1. 
    1. 
    
    When you are finished, you will need to:
    
    1. 
    1.
  maturity: production
  estimated_completion_minutes: 30
  estimated_completion_delta: 10
  LIST_topics: 
    - "MO-10-00-00-00"
  tags:
    - "MO-10-00-00-00"
  authors:
    - Kris Surette, VTCourtForms / Legal Services Vermont
  original_form:
    - https://vtlawhelp.org/cfp/respond-small-claims-complaint
  original_form_published_on: 2015-07-01
  help_page_url: >-
    https://vtlawhelp.org/cfp/respond-small-claims-complaint
  help_page_title: >-
    Respond to a Small Claims Complaint
  allowed_courts: []
  typical_role: "defendant"
  al_weaver_version: "1.11.0"
  generated_on: "2024-11-14"
  languages:
    - en
  jurisdiction: NAM-US-US+VT
  review_date: 2024-11-14
  form_titles:
    - Small claims answer
  form_numbers:
    - 100-00126
  update_notes: |
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "VT"
---
code: |
  github_repo_name =  'docassemble-SmallClaimsAnswer'
---
code: |
  interview_short_title = "Respond to a small claims case"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
---
objects:
  - all_courts: ALCourtLoader.using(file_name='docassemble.VTSharedYMLFile:data/sources/courts_list_full.xlsx')
---
code: |
  trial_court_index = all_courts.matching_courts_in_county(county_name=user_selected_county,search_columns=['division_abbr'],search_string=trial_court_division)[0][0]
---
sections:
  - review_small_claims_answer: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_small_claims_answer
code: |
  # Set the allowed courts for this interview
  allowed_courts = []
  nav.set_section("review_small_claims_answer")
  user_role = "defendant"
  user_ask_role = "defendant"
  if was_sued == False:
    wrong_interview_kickout
  else:
    if sued_for >= 10001:
      wrong_interview_kickout
    else:
      sued_when_served
      if sued_when_served <= today().minus(months=1):
        late_answer_warning
  lets_get_started
  users.gather()
  set_parts(subtitle=str(users))
  set_progress(14)
  users[0].address.address
  users[0].daytime_phone_number
  users[0].email
  set_progress(28)
  docket_number
  trial_court_division = "Civil"
  user_selected_county
  trial_court.address.county
  disagrees_with_complaint
  set_progress(42)
  agrees_with_complaint
  has_exempt_income
  has_counterclaim
  set_progress(56)
  other_parties.there_are_any = True
  other_parties.gather()
  interview_order_small_claims_answer = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  small_claims_answer_intro
  interview_order_small_claims_answer
  trial_court.address.county
  small_claims_answer_preview_question
  signature_date
  set_progress(95)
  al_form_requires_digital_signature = False
  basic_questions_signature_flow
  
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  small_claims_answer_download
---
id: Small_claims_answer
continue button field: small_claims_answer_intro
question: |
  Small claims answer
subquestion: |
  This interview will help you respond to a small claims case.
  
  Before you get started, please gather:
  
  1. 
  1. 
  1. 
  
  When you are finished, you will need to:
  
  1. 
  1.

  If you are have been sued in small claims court, you can use this interview to respond.

  Most people take about 30 minutes to complete this interview.
---
id: screening have you been sued
question: |
  Is this tool right for you?
subquestion: | 
  Have you been sued in small claims court?
fields:
  - "Did you get a complaint that says this near the top: SMALL CLAIMS COMPLAINT?": was_sued    
    datatype: yesnoradio
---
id: screening sued for under 10k
question: |
  Is this tool right for you?
subquestion: | 
  How much do they say you owe?
fields:
  - Amount on the complaint: sued_for    
    datatype: currency
---
id: screening when served
question: |
  Is this tool right for you?
subquestion: | 
  When did you receive the complaint?
fields:
  - Date you got it: sued_when_served    
    datatype: date
---
id: screening late answer warning
question: |
  Warning
subquestion: | 
  The court sets a deadline to send your answer in within 30 days of receiving the complaint. If it has been longer than 30 days, fill out this form and file it with the court **as soon as possible.** Do this before the plaintiff asks for a default judgment against you, which can happen any time after the 30-day deadline.

  You can still use this tool, but because you are late, be warned that the plaintiff may be asking the court for a default judgment against you now or very soon.

  If you want to continue, tap Next.
continue button field: late_answer_warning
---
id: screening wrong interview kickout
question: |
  Stop
subquestion: | 
  This is not the right tool for you to use.

  Ask for general help with court forms or the court process by contacting the [Vermont Judiciary Access and Resource Center.](https://www.vermontjudiciary.org/self-help/ARC) Their services are free and they serve the whole state. They do NOT give legal advice.

  Email: [selfhelp@vtcourts.gov](mailto:selfhelp@vtcourts.gov)
  
  Call: 802-879-1185
buttons:
  - DELETE your answers: restart
continue button field: wrong_interview_kickout
---
id: lets get started
question: |
  Continue
subquestion: |
  
  Keep in mind, you can edit your answers after you preview the finished forms. You can also do that anytime by choosing Edit My Answers on the side of the screen or in the Menu at the top-right of the screen.
  
  You can also go to the Menu and quickly Exit and Delete Your Answers if you need to. And, you may choose to make a free account so you can store your answers online and come back to them later.
  
  Let's get started. Tap Next.
continue button field: lets_get_started
---
id: Phone and email
question: |
  Phone and email
fields:
  - "Your daytime phone number": users[0].daytime_phone_number
    maxlength: 27
  - "Your email address": users[0].email
    maxlength: 38  
---
id: choose a court county
question: |
  What county is your case in?
fields:
  - note: |
      Choose the county where you will file this form.

  - County: user_selected_county
    code: sorted(all_courts.unique_column_values('branch') - {"Environmental", "Judicial Bureau"} )
  
  - note: |
      ${ collapse_template(which_county_to_choose) }
      ${ collapse_template(in_which_county) }
---
id: Disagree with the complaint
question: |
  Do you disagree with the complaint?
subquestion: |
  I disagree that I owe the plaintiff the full amount claimed in the complaint and I request a court hearing.
fields:
  - "I disagree with the complaint": disagrees_with_complaint
    datatype: yesno
  - "Please explain why": disagrees_with_complaint_description
    input type: area
    show if: disagrees_with_complaint
---
id: Agree with the complaint
question: |
  Do you agree with the complaint?
subquestion: |
  I agree that I owe the plaintiff the full amount claimed in the complaint and the court may enter a judgment against me. (If unpaid after 30 days, interest on the unpaid amount will accrue at 12% per year).
fields:
  - "I agree with the complaint": agrees_with_complaint
    datatype: yesno
  - "I agree to pay the amount in full within 30 days.": agrees_to_pay_in_full
    datatype: yesno
    show if: agrees_with_complaint
  - "I cannot pay the full amount at one time. I'd like to ask the court for installment payments.": agrees_to_pay_installments
    datatype: yesno
    show if: agrees_with_complaint
  - "I can pay this amount": agrees_to_pay_installments_amount
    datatype: currency
    min: 0
    show if: agrees_to_pay_installments
  - Every: agrees_to_pay_installments_period
    datatype: radio
    choices:
      - Week
      - Two weeks
      - Month
      - Two months
    show if: agrees_to_pay_installments
  - Starting on this date: agrees_to_pay_installments_start_date
    datatype: date
    show if: agrees_to_pay_installments
---
id: Exempt income
question: |
  Do you have "exempt" income?
subquestion: |
  That is, do you have....
fields:
  - "Yes, I have exempt income": has_exempt_income
    datatype: yesno
---
id: Counterclaims
question: |
  Do you want to make a counterclaim?
subquestion: |
  That is, do you....
fields:
  - "Yes, I want to make a counterclaim": has_counterclaim
    datatype: yesno
  - "Please describe the reason(s) for your counterclaim": counterclaim_description
    input type: area
---
id: preview small_claims_answer
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_small_claims_answer'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: small_claims_answer_preview_question   
---
code: |
  signature_fields = ['users[0].signature']
---
id: Signing your forms
question: |
  Signature date
fields:
  - "This is how your name will appear under your signature.": printed_signature
    default: |
      ${ users[0].name }
    maxlength: 34

  - "Date of your signature for these forms": signature_date
    datatype: date
    required: False
    default: |
      ${ today() }
  -  note: |
       You can change this date later if you want.
       
       **Tap Next to choose how to sign your documents.**
---
id: signature choice
decoration: file-signature
question: |
  Your documents are almost ready
subquestion: |
  How do you want to sign them?
fields: 
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
    show if:
      code: |
        al_form_requires_digital_signature
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
      - On the paper with a pen after I print the documents: sign_after_printing
    show if:
      code: |
        not al_form_requires_digital_signature
continue button field: saw_signature_choice    
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: small claims answer review screen
event: review_small_claims_answer
question: |
  Review your answers
review:
  - Edit: trial_court
    button: |
      **Trial court**
  
      % if defined("trial_court.address.county"):
      * address: ${ trial_court.address.block() }
      % endif
  - Edit: docket_number
    button: |
      **Docket number**:
      ${ docket_number }
  - Edit: other_parties.revisit
    button: |
      **Other parties**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: agrees_with_complaint
    button: |
      **Agree with complaint**:
      ${ word(yesno(agrees_with_complaint)) }
  - Edit: agrees_to_pay_in_full
    button: |
      **Agree to pay in full**:
      ${ word(yesno(agrees_to_pay_in_full)) }
  - Edit: agrees_to_pay_installments
    button: |
      **Agree to pay installments**:
      ${ word(yesno(agrees_to_pay_installments)) }
  - Edit: agrees_to_pay_installments_amount
    button: |
      **In this amount**:
      ${ currency(agrees_to_pay_installments_amount) }
  - Edit: agrees_to_pay_installments_period
    button: |
      **Every**:
      ${ agrees_to_pay_installments_period }
  - Edit: agrees_to_pay_installments_start_date
    button: |
      **Starting**:
      ${ agrees_to_pay_installments_start_date }
  - Edit: disagrees_with_complaint
    button: |
      **Disagree with complaint**:
      ${ word(yesno(disagrees_with_complaint)) }
  - Edit: disagrees_with_complaint_description
    button: |
      **Please explain**:
      > ${ single_paragraph(disagrees_with_complaint_description) }
  - Edit: has_exempt_income
    button: |
      **Have exempt income**:
      ${ word(yesno(has_exempt_income)) }
  - Edit: has_counterclaim
    button: |
      **Have a counterclaim**:
      ${ word(yesno(has_counterclaim)) }
  - Edit: counterclaim_description
    button: |
      **Please describe**:
      > ${ single_paragraph(counterclaim_description) }
  - Edit: signature_date
    button: |
      **Date of signature**:
      ${ signature_date }
  - Edit: users[0].daytime_phone_number
    button: |
      **Your daytime phone number**:
      ${ users[0].daytime_phone_number }
---
continue button field: other_parties.revisit
question: |
  Edit other_parties
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
edit:
  - name.first
  - signature
  - address.address
  - daytime_phone_number
  - email
confirm: True
---
############################# SIGNATURE #############################
---
id: User signature
question: |
  User signature
continue button field: User_signature
---
id: signature choice
decoration: file-signature
question: |
  Your documents are almost ready
subquestion: |
  How do you want to sign them?
fields: 
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
    show if:
      code: |
        al_form_requires_digital_signature
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
      - On the paper with a pen after I print the documents: sign_after_printing
    show if:
      code: |
        not al_form_requires_digital_signature
continue button field: saw_signature_choice    
---
---
id: download small_claims_answer
event: small_claims_answer_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_small_claims_answer'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - small_claims_answer_Post_interview_instructions: ALDocument.using(title="Instructions", filename="small_claims_answer_next_steps.docx", enabled=True, has_addendum=False)
  - small_claims_answer_attachment: ALDocument.using(title="Small claims answer", filename="small_claims_answer", enabled=True, has_addendum=True, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[small_claims_answer_Post_interview_instructions, small_claims_answer_attachment], filename="small_claims_answer", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[small_claims_answer_attachment],  filename="small_claims_answer", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: small_claims_answer_next_steps
  docx template file: small_claims_answer_next_steps.docx
  variable name: small_claims_answer_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: small claims answer
  filename: small_claims_answer
  variable name: small_claims_answer_attachment[i]
  skip undefined: True
  pdf template file: small_claims_answer.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county }
      - "docket_number": ${ docket_number }
      - "other_parties1_name": ${ other_parties[0] }
      - "users1_name": ${ users[0] }
      - "agrees_with_complaint": ${ agrees_with_complaint }
      - "agrees_to_pay_in_full": ${ agrees_to_pay_in_full }
      - "agrees_to_pay_installments": ${ agrees_to_pay_installments }
      - "agrees_to_pay_installments_amount": ${ currency(agrees_to_pay_installments_amount) }
      - "agrees_to_pay_installments_period": ${ agrees_to_pay_installments_period }
      - "agrees_to_pay_installments_start_date": ${ agrees_to_pay_installments_start_date.format() }
      - "disagrees_with_complaint": ${ disagrees_with_complaint }
      - "disagrees_with_complaint_description": ${ small_claims_answer_attachment.safe_value("disagrees_with_complaint_description") }
      - "has_exempt_income": ${ has_exempt_income }
      - "has_counterclaim": ${ has_counterclaim }
      - "counterclaim_description": ${ small_claims_answer_attachment.safe_value("counterclaim_description") }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_name_1": ${ users[0] }
      - "users1_address_on_one_line": ${ users[0].address.on_one_line() }
      - "signature_date": ${ signature_date }
      - "users1_daytime_phone_number": ${ users[0].daytime_phone_number }
      - "users1_email": ${ users[0].email }
---
code: |
  small_claims_answer_attachment.overflow_fields["disagrees_with_complaint_description"].overflow_trigger = 348
  small_claims_answer_attachment.overflow_fields["disagrees_with_complaint_description"].label = "Please explain"
  small_claims_answer_attachment.overflow_fields["counterclaim_description"].overflow_trigger = 344
  small_claims_answer_attachment.overflow_fields["counterclaim_description"].label = "Please describe"
  small_claims_answer_attachment.overflow_fields.gathered = True



