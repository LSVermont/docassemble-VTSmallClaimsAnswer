---
include:
  - docassemble.VTDisclosureOfExemptIncome:disclosure_of_exempt_income_to_include.yml
  - docassemble.VTFeeWaiverWithIncludeYMLFile:VT_fee_waiver_to_include.yml
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.VTSharedYMLFile:VTSharedYMLFile.yml

---
metadata:
  title: >-
    Small claims answer
  short title: >-
    Small claims answer
  description: |-
    Small Claims Answer form for Vermont. Based on Vermont Judiciary paper form 100-00126 (2/2025).
  can_I_use_this_form: |
    If you have been sued in small claims court, you can use this tool to respond.
  before_you_start: |
    0
  maturity: production
  estimated_completion_minutes: 30
  estimated_completion_delta: 10
  LIST_topics: 
    - "MO-10-00-00-00"
  tags:
    - "MO-10-00-00-00"
  authors:
    - K. Surette, VTCourtForms / Legal Services Vermont
  original_form:
    - https://vtlawhelp.org/cfp/respond-small-claims-complaint
  original_form_published_on: 2025-02-01
  help_page_url: >-
    https://vtlawhelp.org/cfp/respond-small-claims-complaint
  help_page_title: >-
    Respond to a Small Claims Complaint
  allowed_courts: []
  typical_role: "defendant"
  al_weaver_version: "1.11.0"
  generated_on: "2024-11-14"
  languages:
    - en
  jurisdiction: NAM-US-US+VT
  review_date: 2025-02-19
  form_titles:
    - Small claims answer
  form_numbers:
    - 100-00126
  update_notes: |
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "VT"
---
code: |
  github_repo_name =  'docassemble-SmallClaimsAnswer'
---
code: |
  interview_short_title = "Respond to a small claims case"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
---
objects:
  - all_courts: ALCourtLoader.using(file_name='docassemble.VTSharedYMLFile:data/sources/courts_list_full.xlsx')
---
code: |
  trial_court_index = all_courts.matching_courts_in_county(county_name=user_selected_county,search_columns=['division_abbr'],search_string=trial_court_division)[0][0]
---
############Code below to allow Edit my answers to be clicked in Menu or in side nav#########
---
reconsider: True
code: |
  al_menu_items_tmp = [
    {"url": url_ask(['al_start_over_confirmation','al_start_over']),
    "label": "Start over"
    },
    {
      "url": url_ask(['al_exit_logout_confirmation', 'al_exit_logout']),
      "label": "Exit and delete my answers"
    },
  ]
  if al_enable_incomplete_downloads:
    al_menu_items_tmp.append({
        "url": url_action('al_error_action_download_screen'), 
        "label": "Download current progress"
    })
  
  # Answer set feature is behind a server-wide configuration option
  if get_config('assembly line',{}).get('enable answer sets'):
    al_menu_items_tmp.extend([
    {"url": url_ask(["al_sessions_snapshot_label", {"recompute": ["al_sessions_save_session_snapshot"]}, "al_sessions_save_status"]),
    "label": "Save answer set"
    },
    action_menu_item("Load answer set", "al_load_saved_session"),
  ]
  )
  
  if get_config('assembly line',{}).get('enable answer set imports'):
    al_menu_items_tmp.append(
      {"url": url_ask(["al_sessions_json_file", {"recompute": ["al_sessions_import_json"]}, "al_sessions_load_status"]),
      "label": "Import answer set"
      }
    )
  al_menu_items_tmp.append(
    {
      "url": url_action('edit_answers_screen'),
      "label": "Edit my answers"
      
    }
  )
    
  al_menu_items = al_menu_items_tmp
  del al_menu_items_tmp
---
event: edit_answers_screen
id: edit answers screen
question: |
  Edit your answers
subquestion: |
  ${ action_button_html(url_action('review_small_claims_answer'), label='<i class="fa-solid fa-pencil"></i> Edit your answers', color='info') }
  
  Remember to come back to this screen to continue.
continue button field: VT_fee_waiver_preview_question
---
---
sections:
  - intro: Is this tool right for you?
  - about_you: About you
  - other_party: The other party
  - case_info: Your court case
  - any_defenses: Any defenses?
  - exempt_income: Any exempt income?
  - counterclaims: Any counterclaim?
  - review_small_claims_answer: <i class="fa-solid fa-pencil"></i> <u>Edit your answers</u>
  - sign: Sign your document
  - get_docs: Download your document
progressive: False
---
#################### Interview order #####################
---
id: interview_order_small_claims_answer
code: |
  user_role = "defendant"
  user_ask_role = "defendant"
  
  nav.set_section('intro')
  if was_sued == False:
    wrong_interview_kickout
  else:
    if sued_for >= 10001:
      wrong_interview_kickout
    else:
      sued_when_served
      if sued_when_served <= today().minus(months=1):
        late_answer_warning
      else:
        you_can_use_this_tool
  lets_get_started
  
  nav.set_section('about_you')
  users.gather()
  set_progress(14)
  users[0].address.address
  users[0].phone_number
  users[0].email
  set_progress(24)
  
  nav.set_section('case_info')
  docket_number
  trial_court_division = "Civil"
  user_selected_county
  trial_court.address.county
  set_progress(32)

  nav.set_section('other_party')
  other_parties.there_are_any = True
  other_parties.gather()
  set_progress(40)
  
  nav.set_section('any_defenses')
  if len(defenses.true_values()) > 0:
    disagrees_additional_explanation
    get_merged_defenses
  if not len(defenses.true_values()) > 0:
    agreeing_with_complaint_and_payments
  set_progress(50)
  
  nav.set_section("exempt_income")
  has_exempt_income_state
  set_progress(60)
  
  nav.set_section("counterclaims")
  counterclaims_intro
  if sued_by_collection_agency:
    if len(counterclaims.true_values()) == 0:
      no_counterclaims
    else:
      get_merged_counterclaims
      counterclaims_amount
      if wants_to_fill_out_fee_waiver:
        interview_order_VT_fee_waiver
  else:
    if plaintiff_owes_user_money:
      counterclaims_amount
      if wants_to_fill_out_fee_waiver:
        interview_order_VT_fee_waiver
    else:
      no_counterclaims
      wants_to_fill_out_fee_waiver = False
  set_progress(70)
  
  if len(has_exempt_income_state.true_values()) == 0 and len(has_exempt_income_other.true_values()) == 0 and not defined("otherwise_exempt"):
    wants_to_fill_out_financial_disclosure
  set_progress(80)  

  set_progress(92)
  interview_order_small_claims_answer = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  interview_order_small_claims_answer
  nav.set_section("review_small_claims_answer")
  trial_court.address.county
  if len(defenses.true_values()) > 0:
    get_merged_defenses
  if sued_by_collection_agency:
    if counterclaims_amount > 0:
      get_merged_counterclaims
  small_claims_answer_preview_question
  set_progress(90)
  nav.set_section("sign")
  signature_date
  set_progress(95)
  al_form_requires_digital_signature = False
  basic_questions_signature_flow
  
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  nav.set_section("get_docs")
  small_claims_answer_download
---
id: stop_testing_here
question: |
  **Stop testing here**
continue button field: stop_testing_here
---
id: basic questions intro screen
question: |
  **${interview_short_title} in Vermont**
subquestion: |  
  
  ${ intro_vtcourtforms_3_steps }
  
  <i class="fas fa-file-text fa-2x"></i> This tool will produce forms to respond to a small claims lawsuit. Depending on your answers to the questions, this tool will complete these forms:
  
  - Small Claims Answer
  - Certificate of Service
  - Disclosure of Exempt Income (VTCourtForms will tell you if you need this)
  - Financial Disclosure Affidavit (VTCourtForms will tell you if you need this)
  - Court fee waiver form (if you want to make a "counterclaim")
  
  <i class="fas fa-clock fa-2x"></i> It may take you 45 minutes to complete this. 
  
  <i class="fas fa-circle-info fa-2x"></i> It is free to use this program. This site is not a lawyer. Visit our [VTLawHelp.org website](https://vtlawhelp.org) for legal information.
  
  ${ intro_vtcourtforms_created_by }

  Tap Next to continue.
  
continue button field: al_intro_screen
---
id: screening have you been sued
question: |
  Is this tool right for you?
subquestion: | 
  Have you been sued in small claims court?
fields:
  - "Did you get a complaint that says this near the top: SMALL CLAIMS COMPLAINT?": was_sued    
    datatype: yesnoradio
---
id: screening sued for under 10k
question: |
  Is this tool right for you?
subquestion: | 
  How much do they say you owe?
fields:
  - Amount on the complaint: sued_for    
    datatype: currency
---
id: screening when served
question: |
  Is this tool right for you?
subquestion: | 
  When did you receive the complaint?
fields:
  - Date: sued_when_served    
    datatype: date
---
id: screening late answer warning
question: |
  Warning
subquestion: | 
  The court sets a deadline to send your answer in within 30 days of receiving the complaint. If it has been longer than 30 days, fill out this form and file it with the court **as soon as possible.** Do this before the plaintiff asks for a default judgment against you, which can happen any time after the 30-day deadline.

  You can still use this tool, but because you are late, be warned that the plaintiff may be asking the court for a default judgment against you now or very soon.

continue button field: late_answer_warning
---
id: screening wrong interview kickout
question: |
  Stop
subquestion: | 
  This is not the right tool for you to use.

  % if was_sued == False or sued_for >= 10001:
  This tool is only for use in small claims court where you have been sued for $10,000 or less.
  % endif

  Ask for general help with court forms or the court process by contacting the [Vermont Judiciary Access and Resource Center.](https://www.vermontjudiciary.org/self-help/ARC) Their services are free and they serve the whole state. They do NOT give legal advice.

  Email: [selfhelp@vtcourts.gov](mailto:selfhelp@vtcourts.gov)
  
  Call: 802-879-1185
buttons:
  - DELETE your answers: restart
continue button field: wrong_interview_kickout
---
code: |
  answer_deadline = sued_when_served.plus(days=30)
---
id: you can use this tool
question: |
  Important
subquestion: |  
  <i class="fas fa-check fa-3x" style="color: #429a3c;" aria-hidden="true"></i>  Yes, you can use this tool to fill out these forms.

  **Important 30-day deadline**: The court sets a deadline to send your answer in within 30 days of receiving the complaint. It's important to meet this deadline. If you are late, the plaintiff can ask for a default judgment against you any time after the 30-day deadline. Then you may lose your case.

  You said you got the complaint on ${ sued_when_served }. That means you need to deliver or postmark your answer to the court by this date: **${ answer_deadline }**.
continue button field: you_can_use_this_tool
---
id: lets get started
question: |
  Getting started
subquestion: |  
  Before you get started, have the papers you got from the court at hand. This includes the Small Claims Complaint.
  
  **Important: This tool does not file your forms for you.** When you are finished, you will need to send your answer back to the court and send a copy to the other party (the plaintiff). Our Next Steps document at the end of this tool will give you instructions.
  
  Keep in mind, you can edit your answers after you preview the finished forms. You can also do that anytime by choosing Edit My Answers on the side of the screen or in the Menu at the top-right of the screen.
  
  You can also go to the Menu and quickly Exit and Delete Your Answers if you need to. And, you may choose to make a free account so you can store your answers online and come back to them later.

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vtcourtforms/terms-of-use).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        

continue button field: lets_get_started
---
id: gather users address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.unit
  - users[0].address.state
  - users[0].address.country
question: |
  What is your address?  
fields:
  - code: |
      users[0].address_fields(default_state=AL_DEFAULT_STATE)
  - I have a mailing address that is different from my street address: users_mailing_address_different
    datatype: yesno
  - Mailing address: users[0].mailing_address.address
    address autocomplete: True
    show if: users_mailing_address_different
  - Unit: users[0].mailing_address.unit
    required: False
    show if: users_mailing_address_different
  - City: users[0].mailing_address.city
    show if: users_mailing_address_different
  - State: users[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: users_mailing_address_different
  - Zip or postal code: users[0].mailing_address.zip
    required: False
    show if: users_mailing_address_different
---
id: phone and email
question: |
  Phone and email
fields:
  - "Your home or cell phone number": users[0].phone_number
    datatype: al_international_phone
    required: false
  - "Your work phone or other number": users[0].work_phone_number
    datatype: al_international_phone
    required: false
  - "Your email address": users[0].email
    maxlength: 38
    required: false
---
id: names of opposing parties
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
question: |
  % if user_started_case:
  Name of ${ ordinal(i) } defendant
  % else:
  Name of ${ ordinal(i) } plaintiff in this case
  % endif
subquestion: |
  % if user_started_case:
  A defendant is the person who was sued and is responding to a court action.
  % else:
  A plaintiff is a person, company or organization who is suing you. There might be more than one plaintiff in your case. We'll collect their names one at a time.

  Look at the forms you got from the court to fill in this information.
  % endif
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')
---
id: any other opposing parties
question: |
  % if user_started_case:
  Is there any other defendant in this case?
  % else:
  Is there any other plaintiff in this case?
  % endif
fields:
  - no label: other_parties.there_is_another
    datatype: yesnoradio
---
id: docket number
question: |
  What is the case number used to track this case in court?
subquestion: |
  Look at the forms you got from the court to see the docket number / case number. It's usually in the upper-right of the forms. The number will be formatted like this example: 25-SC-00000.
fields:
  - I don't know the case number: dont_know_docket_number
    datatype: yesno    
  - Case number: docket_number
    hide if: dont_know_docket_number
validation code: |
  # This should be safe too
  if dont_know_docket_number:
    docket_number = ''   
---
id: choose a court county
question: |
  What county is your case in?
subquestion: |
  Look at the forms you got from the court to see the name of the county. It's usually in the upper-left of the forms next to the word "Unit."
fields:
  - County: user_selected_county
    code: sorted(all_courts.unique_column_values('branch') - {"Environmental", "Judicial Bureau"} )
  
  - note: |
      ${ collapse_template(which_county_to_choose) }
      ${ collapse_template(in_which_county) }
---
id: is plaintiff a debt collector
question: |
  Is ${ other_parties.short_list(2) } a debt collector?
subquestion: |
  We ask this question because it may affect what you might ask for in a counterclaim.
  
  A debt collector generally is a person or a company that regularly collects debts owed to others, usually when those debts are past-due.

  Debt collectors include collection agencies or lawyers who collect debts as part of their business. There are also companies that buy past-due debts from creditors or other businesses and then try to collect them. These debt collectors are also called debt collection agencies, debt collection companies or debt buyers.
  
fields:
  - Is ${ other_parties.short_list(2) } a **debt collector**?: sued_by_collection_agency
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: None
---
id: defenses
question: |
  Any reasons why you believe you do **not** owe this money?
subquestion: |
  % if defined("other_parties[1]"):
  In this small claims case, plaintiffs (${ other_parties.short_list(2) }) have started the case by filing a "complaint" against you.
  % else:
  In this small claims case, a plaintiff (${ other_parties.short_list(2) }) has started the case by filing a "complaint" against you.
  % endif
  
  “Defenses” are reasons why ${ other_parties.short_list(2) } may not have a legal right to the money. This screen will help you report any possible defenses in your answer.

  % if defined("other_parties[1]"):
  **Note**: If you choose any defenses, you are choosing to disagree with what ${ other_parties.short_list(2) } have claimed and you are asking for a court hearing.
  % else:
  Note: If you choose any defenses, you are choosing to disagree with what ${ other_parties.short_list(2) } has claimed and you are asking for a court hearing.
  % endif

  ###Common defenses###
  
  Below are some common defenses. **Check any boxes that describe your situation, or check None if you don't have a defense**.
  
  If you select a defense, you can write more about the situation on the next screen.
  
fields:
- "Check any boxes that describe your situation, or check None.": defenses
  datatype: checkboxes
  choices:
    - "I don’t owe money to the plaintiff.": dont_owe
    - "I do not know if the plaintiff's claims are true.": dont_know
    - "I have already paid the plaintiff.": already_paid
    - "The dollar amount the plaintiff is asking for does not match the dollar amount I actually owe. (Tip: If you cannot recall all the amounts, or if you are not sure, check this box.)": amount_doesnt_match
    - "I don't recognize this debt. (Tip: If you cannot recall everything that the plaintiff is saying in their complaint, or if you are not sure, check this box.)": do_not_recognize
    - "This debt is discharged due to my personal bankruptcy.": bankruptcy
    - "This debt is of a Limited Liability Corporation (LLC) registered in my name.": llc_debt
    - "The plaintiff is not the original creditor or lender of the money, and I don't believe the plaintiff has the right to collect the money.": not_orginal_creditor
    - "It has been at least six years since I incurred this debt.": long_time_since_debt
    - "It has been at least six years since my last payment of this debt.": long_time_since_payment
    - "I don't owe this money **for another reason**.": other_reason
---
# "!!omap" makes these terms ordered: 
# their order here will be their same order when shown to users.
variable name: defenses_terms
data: !!omap
  - dont_owe: "I don’t owe money to the plaintiff."
  - dont_know: "I do not know if the plaintiff's claims are true."
  - already_paid: "I have already paid the plaintiff."
  - do_not_recognize: "I don't recognize this debt."
  - amount_doesnt_match: "The dollar amount the plaintiff is asking for does not match the dollar amount I actually owe."
  - bankruptcy: "This debt is discharged due to personal bankruptcy."
  - llc_debt: "This debt is of a Limited Liability Corporation registered in my name."
  - not_orginal_creditor: "The plaintiff is not the original creditor or lender of the money, and I don't believe the plaintiff has the right to collect the money."
  - long_time_since_debt: "It has been at least six years since I incurred this debt."
  - long_time_since_payment: "It has been at least six years since my last payment of this debt."
  - other_reason: "I don't owe this money."
---
id: disagrees with the complaint
question: |
  Do you want to add any more details?
subquestion: |
  So far, this is the text we have to explain your defense(s). You can explain a little more if you want.
  
  **I disagree that I owe the plaintiff the full amount claimed in the complaint and I request a court hearing.**

  % for item in defenses.true_values():
  - **${ defenses_terms[item] }**
  
  % endfor
fields:
  - "More explanation (optional)": disagrees_additional_explanation
    input type: area
    required: false
    maxlength: 600
---
id: agrees with the complaint
question: |
  You agree with the complaint?
subquestion: |
  On the last screen, you did not choose any "defenses" to the small claims complaint against you. That means you agree with the amount you owe and who you owe. If that is true, check the box below.

  You should only check the box below if your recall everything that ${ other_parties.short_list(2) } is saying in their complaint as true. If you are not sure, do not check this box. Go back one screen and choose a defense instead.

  **When you agree with the complaint**: When you agree, the court may make a judgment saying that you owe the debt. Depending on your financial situation, you may have to pay the money back. You can ask the court for installment payments, but it is not certain that they will allow it.
  
  **I agree that I owe ${ other_parties.short_list(2) } the full amount claimed in the complaint and the court may enter a judgment against me.**
fields:
  - "I agree": agrees_with_complaint
    datatype: yesno
  - note: |
      Check the box if you agree. If you do **not** agree and want to revisit the list of defenses, tap the Undo button.
  - note: |
      If the court finds you need to pay the debt and enters a judgment against you, what do you plan to do?
      
    show if: agrees_with_complaint  
  - "Check one of the following.": payment
    datatype: checkboxes
    choices:    
      - "I agree to pay the amount in full within 30 days. (If unpaid after 30 days, interest on the unpaid amount will accrue at 12% per year).": agrees_to_pay_in_full
      - "I cannot pay the full amount at one time. I'd like to ask the court for installment payments.": agrees_to_pay_installments
    show if: agrees_with_complaint
    none of the above: false
    minlength: 1
    maxlength: 1
  - "I can pay this amount": agrees_to_pay_installments_amount
    datatype: currency
    min: 0
    js show if: |
      val("payment") == "agrees_to_pay_installments"
  - Every: agrees_to_pay_installments_period
    datatype: radio
    choices:
      - Week
      - Two weeks
      - Month
      - Two months
    js show if: |
      val("payment") == "agrees_to_pay_installments"
  - Starting on this date: agrees_to_pay_installments_start_date
    datatype: date
    js show if: |
      val("payment") == "agrees_to_pay_installments"

continue button field: agreeing_with_complaint_and_payments
---
id: exempt income
question: |
  Do you have "exempt" income?
subquestion: |
  Certain types of income and assets (things you own) are called "exempt" and cannot be taken to pay a debt.
  
  As part of your answer, you can let the plaintiff and the court know if all or some of your income may be exempt from collection. Below are examples of exempt income.
  
  **Check any boxes that apply to you.**

  I am currently eligible, or was eligible within the last two months, for benefits from these exempt sources:

fields:
  - no label: has_exempt_income_state
    datatype: checkboxes
    choices:
      - "the Vermont Department for Children and Families (DCF)": DCF
      - "the Department of Vermont Health Access (DVHA)": DVHA
  - note: |
      Examples of DCF benefits include 3SquaresVT (food), Reach Up, General Assistance, Emergency Housing, Energy Assistance, Fuel Assistance and other programs as seen on this web page: [https://dcf.vermont.gov/benefits](https://dcf.vermont.gov/benefits).
  - note: |
      I have income from these exempt sources:
  - no label: has_exempt_income_other
    datatype: checkboxes
    choices:      
      - "Social Security benefits (including SSDI, SSI and Social Security Retirement payments)": SSA
      - "Veteran’s Benefits": VA
      - "Unemployment Compensation": unemployment
      - "Workers’ Compensation": workers_comp
  - note: |
      Do you have other reasons why you think your income is exempt? (Exempt income cannot be taken to pay a debt.)
  - "If so, you can tell the court the other reasons:": otherwise_exempt
    input type: area
    maxlength: 290
    required: false
  - note: |
      Examples could be:
      
      <ul><li>I have no income.</li>
      <li>My weekly wages before taxes are less than $217.50, so my wages are exempt from collection.</li>
      <li>The debt is about a credit card or loan and my weekly wages are less than $290, so my wages are exempt from collection.</li></ul>
      
      **See the [list of exemptions in Vermont.](https://www.vermontjudiciary.org/media/23)**
---
id: counterclaims intro
question: |
  Counterclaim
subquestion: |
  This part of the tool can help you figure out if you have a “counterclaim” against the plaintiff (the person or company that sued you).

  A counterclaim is a lawsuit the defendant files against the plaintiff in the original case. Many people do not have a counterclaim. 
  
  If you decide to file a counterclaim, you are asking the court to award YOU money. When you ask for money in a counterclaim, you are asking for "damages." 
  
  In a small claims case, you can ask for up to $10,000 in a counterclaim. There is a fee to file a counterclaim, and the amount of the fee can be included in your counterclaim. 
  
  You may want to talk to a lawyer if you are thinking about making a counterclaim. This is because there are some [laws that only apply to how debt collectors do business.](https://files.consumerfinance.gov/f/documents/102012_cfpb_fair-debt-collections-practices-act-fdcpa_procedures.pdf) And for all kinds of plaintiffs, you need to have proof that you suffered real damages.
  
  **Counterclaim filing fee**
  
  - You would pay $25 if your counterclaim is for $500 or less.
  - You would pay $35 if your counterclaim is between $501 and $10,000.
  - If you have a low income, you can ask the court to waive the fee. You can use our VTCourtForms tool for the fee waiver form.

  Tap Next for the next screen.
  
continue button field: counterclaims_intro

---
id: counterclaim debt collector
question: |
  Do you want to make a counterclaim against the debt collector (${ other_parties.short_list(2) })?
subquestion: |
  Below is a list of some counterclaims that might apply to debt collectors because of a law called the [Fair Debt Collection Practices Act (FDCPA).](https://files.consumerfinance.gov/f/documents/102012_cfpb_fair-debt-collections-practices-act-fdcpa_procedures.pdf) These only apply to debt collectors.

  To be successful with a counterclaim, you would need to prove your claim to the court.

  If you make a selection below, you can write more about the situation on the next screen.

  Learn more about counterclaims on [NCLC’s Surviving Debt website.](https://library.nclc.org/book/surviving-debt/common-counterclaims-raise)
  
fields:
  - Check any box that describes your situation, or check None: counterclaims
    datatype: checkboxes
    choices:
      - "${ other_parties.short_list(2) } is not the original creditor or lender of the money, and I didn't get a letter from them alerting me to my debt before I was sued.": no_notice
      - "${ other_parties.short_list(2) } is not the original creditor or lender of the money, and they made statements that were not true or were misleading about the debt.": false_statements
      - "${ other_parties.short_list(2) } is not the original creditor or lender of the money, and they harassed me and they violated the Fair Debt Collection Practices Act (FDCPA).": harassment
      - "${ other_parties.short_list(2) } is not the original creditor or lender of the money, and they owe me money **for another reason**.": plaintiff_owes_me_other_reason
  - note: |
      Notes about harassment and the FDCPA law: 
      
      - You can successfully claim harassment in a case like this if the plaintiff's behavior was **beyond** annoying. For example, they called you at late hours of the night or early morning, they used swear words, or they called you more than two times each day. Those are harassing behaviors.
      
      - The FDCPA applies only to third-party debt collectors, so one element of an FDCPA violation claim is to state that the debt collector is **not** the original creditor. However, this alone does not provide grounds for an FDCPA counterclaim.

      About getting notified: A debt collector or creditor is not required to tell you that they plan to file a lawsuit.
---
id: counterclaim other creditors
question: |
  Do you want to make a counterclaim?
subquestion: |
  To be successful with a counterclaim, you would need to prove your claim to the court.

  Learn more about counterclaims on [NCLC’s Surviving Debt website.](https://library.nclc.org/book/surviving-debt/common-counterclaims-raise)
fields:
  - "Do you want to file a counterclaim against ${ other_parties.short_list(2) }?": plaintiff_owes_user_money
    datatype: yesnoradio
---
id: counterclaim amount
question: |
  Counterclaim details
subquestion: |
  % if sued_by_collection_agency:
  % if len(counterclaims.true_values()) > 0:
  You've selected a reason(s) for filing a counterclaim against ${ other_parties.short_list(2) }:
  
  % for item in counterclaims.true_values():
  - **${ counterclaims_terms[item] }**
  
  % endfor
  % endif
  % endif
  
fields:
  - note: |
        Remember, when you ask for money in a counterclaim, you are asking for "damages." You can include the counterclaim filing fee, too. (Fee is $25 if your counterclaim is for $500 or less. Fee is $35 if your counterclaim is between $501 and $10,000.) In small claims court, the total amount must be $10,000 or less.
  - "I want to ask the court for this amount of money in my counterclaim": counterclaims_amount
    datatype: currency
    min: 0
    max: 10000
    validation messages:
      min: |
        A counterclaim in small claims court can be between $1 and $10,000.
      max: |
        A counterclaim in small claims court can be between $1 and $10,000.
  - "Describe the reason(s) for your counterclaim against ${ other_parties.short_list(2) }. Be specific.": counterclaims_description
    input type: area
    maxlength: 800
  - note: |
      If you do not want to file a counterclaim, tap the Undo button and go back to change your answer.
---
id: if no counterclaim
question: |
  No counterclaim
subquestion: |
  We will not include a counterclaim in your answer.

  Tap Next to continue.
continue button field: no_counterclaims
---
# "!!omap" makes these terms ordered: 
# their order here will be their same order when shown to users.
variable name: counterclaims_terms
data: !!omap
  - plaintiff_owes_money: "I believe the plaintiff owes me money."
  - plaintiff_not_original_creditor: "The plaintiff is not the original creditor or lender of the money, and they violated the Fair Debt Collection Practices Act (FDCPA)."
  - no_notice: "The plaintiff is not the original creditor or lender of the money, and I didn't get a letter from them alerting me to my debt before I was sued."
  - false_statements: "The plaintiff is not the original creditor or lender of the money, and they made statements that were not true or were misleading about the debt."
  - harassment: "The plaintiff is not the original creditor or lender of the money, and they harassed me and they violated the Fair Debt Collection Practices Act (FDCPA)."
  - plaintiff_owes_me_other_reason: "The plaintiff is not the original creditor or lender of the money, and they owe me money."
---
id: want to fill out financial disclosure affidavit
question: |
  Do you want to fill out a Financial Disclosure Affidavit?

subquestion: |
  Earlier, you said you don't have "exempt" income.
  
  Do you think your "reasonable living expenses" for you and your family members living with you are **more** than your income after taxes? If so, it may be worth your time to show the court why you think you should pay less than you owe.
fields:
  - note: |
      Do you want to answer questions about your expenses and income and submit a Financial Disclosure Affidavit form?
  - no label: wants_to_fill_out_financial_disclosure
    datatype: yesnoradio
  - note: |
      Do you want to do that now with this tool? Or later on your own?
    js show if: |
      val("wants_to_fill_out_financial_disclosure") == true
  - no label: wants_to_do_financial_disclosure_now
    input type: radio
    label above field: True
    choices:
    - Now, with this tool
    - Later, on my own
    js show if: |
      val("wants_to_fill_out_financial_disclosure") == true
  - note: |
      If you said "now", consider making an account to save your work. This is because there are quite a few questions to answer on the Financial Disclosure Affidavit form. You might want to start it and come back to finish it.
    js show if: |
      val("wants_to_fill_out_financial_disclosure") == true
---
id: want to fill out fee waiver
question: |
  Do you want to fill out a fee waiver form for your counterclaim?

subquestion: |
  When you have a counterclaim, you pay court fees. If you get public assistance or have a low income, you can ask the court to waive the fees.

  ${ start_accordion('<h2 class="h5">Who can get their fees waived?</h2>') }
  The Vermont Judiciary says the court can waive your filing fee and service costs if:
  
  <ul><li>you get any kind of public assistance, or</li>
  <li>your gross income is at or below <a href="https://www.vtlawhelp.org/150-federal-poverty-level-fpl">150% of the federal poverty guidelines,</a> or</li>
  <li>the court finds you can't pay the fee without expending resources needed to support you and your dependents.</li></ul>

  ${ next_accordion('<h2 class="h5">Information you will need</h2>') }
  <ul><li>the name and address of any employer you might have</li>
  <li>any public assistance that you get (like 3SquaresVT food help, ReachUp help for families, SSI, etc.) and the amount, and</li>
  <li>information about the court case for which you want a fee waiver. (You can find this information on other court papers you have about this case. If you are starting a court action — like filing for divorce — you won't have a case number or docket number yet.)</li></ul>
  
  <p>If you get public assistance, that's all you need. <strong>If you don't get public assistance</strong>, you will also need to know:</p>
  
  <ul><li>your income — If you work or get unemployment, have those paystubs on hand. If you get child support, have that information on hand. If you are self-employed, have your IRS Schedule C on hand or have your income and business expenses from the last 12 months.
  <li>your expenses (like rent, utilities, insurance payments, child care, etc.) — looking back over the last 12 months
  <li>the amount of money you have in the bank and on hand
  <li>the approximate value of your vehicle/car, real estate/home, and any other major things you might own, and
  <li>if filling out form on behalf of a minor or incompetent adult, you need that person’s information.</ul>
  ${ next_accordion('<h2 class="h5">Where to learn more</h2>') }
  <p>Visit the Vermont Judiciary website to learn more about <a href="https://www.vermontjudiciary.org/fees">filing and service fees</a> and <a href="https://www.vermontjudiciary.org/fees"https://www.vermontjudiciary.org/self-help/application-waive-filing-fees-and-service-costs>asking to file court papers for free in Vermont.</a></p>

  <p>Ask for general help with court forms or the court process by contacting the <a href="https://www.vermontjudiciary.org/self-help/ARC">Vermont Judiciary Access and Resource Center.</a> Their services are free and they serve the whole state. They do NOT give legal advice.</p>

  ${ end_accordion() }
  
  
  % if len(has_exempt_income_state.true_values()) > 0 or len(has_exempt_income_other.true_values()) > 0:
    You said you get some public assistance. You **may** be able to get your fees waived.

  % endif
  % if len(has_exempt_income_state.true_values()) == 0 or len(has_exempt_income_other.true_values()) == 0:
    **Do you want to answer questions about your income and expenses so you can fill out the fee waiver form now?**
  % endif
fields:
  - no label: wants_to_fill_out_fee_waiver
    datatype: yesnoradio
---
---
id: combining individual defenses and the explanation
code: |
  merged_defenses_text = ""
  for item in defenses.true_values():
    merged_defenses_text += defenses_terms[item] + "\n"
  merged_defenses_text += disagrees_additional_explanation
  get_merged_defenses = True
reconsider: True
---
---
id: combining individual counterclaims and the explanation
code: |
  merged_counterclaims_text = ""
  for item in counterclaims.true_values():
    merged_counterclaims_text += counterclaims_terms[item] + "\n"
  merged_counterclaims_text += counterclaims_description
  get_merged_counterclaims = True
reconsider: True
---
---
id: preview small_claims_answer
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_small_claims_answer'), label='<i class="fa-solid fa-pencil"></i> Edit your answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: small_claims_answer_preview_question   
---
code: |
  signature_fields = ['users[0].signature']
---
id: Signing your forms
question: |
  Signature date
fields:
  - "This is how your name will appear under your signature.": printed_signature
    default: |
      ${ users[0].name }
    maxlength: 34

  - "Date of your signature for these forms": signature_date
    datatype: date
    required: False
    default: |
      ${ today() }
  -  note: |
       You can change this date later if you want.
       
       **Tap Next to choose how to sign your documents.**
---
id: signature choice
decoration: file-signature
question: |
  Your documents are almost ready
subquestion: |
  How do you want to sign them?
fields: 
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
    show if:
      code: |
        al_form_requires_digital_signature
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
      - On the paper with a pen after I print the documents: sign_after_printing
    show if:
      code: |
        not al_form_requires_digital_signature
continue button field: saw_signature_choice    
---
#id: lets start fee waiver
#question: |
#  Let's start the fee waiver form questions
#subquestion: |
#  You've already answered some of the basic questions that are asked in the fee waiver form. Now we'll work through the remaining questions.
#
#  Tap Next to get started.
#
#continue button field: lets_start_fee_waiver
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: small claims answer review screen
event: review_small_claims_answer
question: |
  Review your answers
subquestion: |  
  ${ review_screen_instructions }
review:
  - note: |
      ### Small claims answer
            
  - Edit:
      - user_selected_county
      - docket_number
      - recompute:
        - trial_court_index
        - trial_court
    button: |      
      **About the court case**
      
      **Case is in**: Small Claims Court, 
      % if defined("user_selected_county"):
      ${ user_selected_county } County, Vermont
      % endif

      **Docket number / case number**: ${ docket_number }
  - Edit: other_parties.revisit
    button: |
      **About the other party / plaintiff(s)**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: 
      - sued_by_collection_agency
    button: |
      **${ other_parties.short_list(2) } is a debt collector**: 
      % if sued_by_collection_agency == True or sued_by_collection_agency == False:
      ${ word(yesno(sued_by_collection_agency)) }  
      % elif sued_by_collection_agency == None:
      Not sure.
      % endif
  - Edit: 
      - users.revisit
    button: |
      **About you**

      % for item in users:
      - ${ item }
      
      ${ item.address }

      % if defined("item.mailing_address.address"):
      Mailing address:
      
      ${ item.mailing_address }
      % endif
      
      ${ item.phone_number }
      
      ${ item.work_phone_number }
      
      ${ item.email }
      % endfor

  - Edit: agrees_with_complaint
    button: |
      **You agree with the complaint**:
      % if defined("agrees_with_complaint"):
      ${ word(yesno(agrees_with_complaint)) }
      % endif
  - Edit: payment
    button: |
      **You agree to pay in full**: ${ word(yesno(agrees_to_pay_in_full)) }
  - Edit: agrees_to_pay_installments_amount
    button: |
      **You would like to pay installments in this amount**: ${ currency(agrees_to_pay_installments_amount) }

      **Every**: ${ agrees_to_pay_installments_period }

      **Starting**: ${ agrees_to_pay_installments_start_date }
  - Edit: 
      - defenses
      - disagrees_additional_explanation
      - recompute:
        - merged_defenses_text
    button: |
      **You disagree with the complaint**: 
      % if len(defenses.true_values()) > 0:
        Yes

        **Your defenses**

      % for item in defenses.true_values():
      - ${ defenses_terms[item] }
      % endfor
      % else:
        No
      % endif
            
      % if defined("disagrees_additional_explanation"):
      **More details** (optional):
      ${ single_paragraph(disagrees_additional_explanation) }
      % endif

  - Edit:
      - plaintiff_owes_user_money
      - counterclaims_amount
    button: |
      % if defined("plaintiff_owes_user_money") and plaintiff_owes_user_money:
        **Amount you want to ask the court for in a counterclaim**:
        ${ currency(counterclaims_amount) }
      % endif
  - Edit:
      - counterclaims_amount
    button: |
      % if defined("counterclaims_amount") and counterclaims_amount > 0:
        **Amount you want to ask the court for in a counterclaim**:
        ${ currency(counterclaims_amount) }
      % endif
      % if len(counterclaims.true_values()) == 0 and counterclaims_amount == 0:
        **Amount you want to ask the court for in a counterclaim**:
        None. No counterclaim.
      % endif

  - Edit: 
      - counterclaims
      - follow up:
        - counterclaims_amount
    button: |
      % if len(counterclaims.true_values()) > 0:
      **About your counterclaim**:
      
      % for item in counterclaims.true_values():
      - ${ counterclaims_terms[item] }
      % endfor
      % else:
      **You have a counterclaim against ${ other_parties.short_list(2) }**: No
      % endif
  - Edit: counterclaims_description
    button: |
      % if sued_by_collection_agency:
      **More details about your counterclaim**:
      % elif defined("counterclaims_description"):
      **Details about your counterclaim**:
      % endif
      ${ single_paragraph(counterclaims_description) }

      
  ####################### Exempt income review  #######################

  - note: |
      % if len(has_exempt_income_state.true_values()) > 0 or len(has_exempt_income_other.true_values()) > 0 or otherwise_exempt != '':
        ### Disclosure of exempt income
      % endif
  - Edit:
      - otherwise_exempt
    button: |      
      **You have exempt income that cannot be taken to pay a debt**: 
      % if len(has_exempt_income_state.true_values()) > 0:
      Yes
      % elif len(has_exempt_income_other.true_values()) > 0:
      Yes
      % elif otherwise_exempt != '':
      Yes
      % else:
      No
      % endif
      
      % if otherwise_exempt != '':
      **Reason(s) why your income may be exempt**:
      ${ otherwise_exempt }
      % endif
  - Edit: wants_to_fill_out_financial_disclosure
    button: |
      % if defined("wants_to_fill_out_financial_disclosure"):
        **You want to fill out a Financial Disclosure Affidavit form.** You think your "reasonable living expenses" for you and your family members living with you are more than your income after taxes.:
      ${ word(yesno(wants_to_fill_out_financial_disclosure)) }
      % endif

      


####################### Fee waiver review  #######################
  
  - note: |
      % if defined("wants_to_fill_out_fee_waiver") and wants_to_fill_out_fee_waiver == True:
      ###Fee waiver for counterclaim
      % endif

  - Edit: household_size
    button: |
      **Number of people in your household**:
      ${ household_size }
            
  - Edit: 
      - public_benefits.revisit
    button: |
      **Public assistance**
      
      % if public_benefits.number_gathered() > 0:
      % for benefit in public_benefits:
      % if benefit.source == "other":
      * ${ benefit.display_name }
      % else:
      * ${ benefit.source }
      % endif
      % endfor
      
      % else:
      - None
      % endif
  - Edit: 
      - employed
    button: |
      **Employed**
      
      - ${ word(yesno(employed)) }

  - Edit: 
      - review_jobs
    button: |
      **Jobs**

      % if jobs.number_gathered() == 0:
      - None
      % else:
      Edit all details about your 
      % if jobs.number_gathered() == 1:
      job. Or add or delete a job.:
      
      % endif
      % if jobs.number_gathered() > 1:
      jobs. Or add or delete a job.:
      
      % endif
      % for item in jobs:
      - ${ item.source }
      % endfor
      % endif

  - Edit: 
      - jobs[0].source
      - jobs[0].is_self_employed

    button: |
      % if jobs[0].is_self_employed:
      - Edit employer name and address: Self employed
      % else:
      - Edit employer name and address: ${ jobs[0].employer.name.first }
      % endif
      
  - Edit: 
      - jobs[1].source
      - jobs[1].is_self_employed

    button: |
      % if jobs[1].is_self_employed:
      - Edit employer name and address: Self employed
      % else:
      - Edit employer name and address: ${ jobs[1].employer.name.first }
      % endif

  - Edit: 
      - jobs[2].source
      - jobs[2].is_self_employed 

    button: |
      % if jobs[2].is_self_employed:
      - Edit employer name and address: Self employed
      % else:
      - Edit employer name and address: ${ jobs[2].employer.name.first }
      % endif

  - Edit: 
      - jobs[3].source
      - jobs[3].is_self_employed

    button: |
      % if jobs[3].is_self_employed:
      - Edit employer name and address: Self employed
      % else:
      - Edit employer name and address: ${ jobs[3].employer.name.first }
      % endif
      
  - Edit: 
      - other_incomes.revisit
    button: |
      **Other incomes**

      % for income in other_incomes.complete_elements():
      * ${ income.display_name.lower() }
      % endfor

      % if other_incomes.number_gathered() == 0:
      - None
      % endif
          
      
  - Edit: expenses.revisit
    button: |
      **Expenses**:

      % if expenses.number_gathered() == 0:
      - None
      % endif
      % for item in expenses:
      - ${ item.display_name.lower() }
      % endfor

  - Edit: vehicles.revisit
    button: |
      **Vehicles**
      
      % for item in vehicles:
      * ${ item.make } ${ item.model } ${ item.year }          
      % endfor
      % if vehicles.number_gathered() == 0:
      - None
      % endif
  - Edit: 
      - real_estate.revisit
    button: |
      **Real estate**

      % for item in real_estate.complete_elements():
      % if item.source == "primary residence":
      * primary residence
      % else:
      * ${ item.display_name.lower() }
      % endif
      % endfor
      % if real_estate.number_gathered() == 0:
      - None
      % endif

  - Edit: bank_assets.revisit
    button: |
      **Bank accounts and cash**
      
      % for item in bank_assets:
      - ${ item.display_name.lower() }
      % endfor
      % if bank_assets.number_gathered() == 0:
      - None
      % endif   
      
  - Edit: other_assets.revisit
    button: |
      **Other assets**

      % for item in other_assets.complete_elements():
        - ${ item.display_name.lower() }
      % endfor

      % if other_assets.number_gathered() == 0:
      - None
      % endif      
      
  - Edit: other_reasons_why_cannot_afford
    button: |
      **Other reason(s) you cannot afford the fees (optional question)**:
      
      % if defined("other_reasons_why_cannot_afford"):
      % if other_reasons_why_cannot_afford == "":
      - None
      % else:
      ${ other_reasons_why_cannot_afford }
      % endif
      % endif

  - Edit: signature_date
    button: |
      **Date of signature for these forms**:
      ${ signature_date }

  - note: |
      **Select Resume, below, when you are done. It will take a moment to generate your form again.**
---


---
continue button field: other_parties.revisit
question: |
  Edit info about the other party
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
continue button field: users.revisit
question: |
  Edit info about you
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Mailing address: |
      row_item.mailing_address.block() if defined("row_item.mailing_address.address") else ""
  - Home phone or cell: |
      row_item.phone_number if defined("row_item.phone_number") else ""
  - Work phone: |
      row_item.work_phone_number if defined("row_item.work_phone_number") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - address.address
  - phone_number
  - work_phone_number
  - email

confirm: True
---
############################# SIGNATURE #############################
---
id: User signature
question: |
  User signature
continue button field: User_signature
---
id: signature choice
decoration: file-signature
question: |
  Your documents are almost ready
subquestion: |
  How do you want to sign them?
fields: 
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
    show if:
      code: |
        al_form_requires_digital_signature
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
      - On the paper with a pen after I print the documents: sign_after_printing
    show if:
      code: |
        not al_form_requires_digital_signature
continue button field: saw_signature_choice    
---
id: download small_claims_answer
event: small_claims_answer_download
question: |
  ${ download_screen_instructions_headline }
subquestion: |
  
  ${ download_screen_instructions }

  ${ action_button_html(url_action('review_small_claims_answer'), label='<i class="fa-solid fa-pencil"></i> Edit your answers', color='info') }

  <hr>
  
  <h4 style="margin-bottom: 18px;">Documents to download</h4>
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  <hr>  
  
  ${ download_screen_bottom_instructions }
  
  ${ collapse_template(not_seeing_email) }
  ${ collapse_template(log_out_when_done) }

progress: 100
---
attachment:
  variable name: small_claims_answer_attachment.addendum
  docx template file: small_claims_answer_addendum.docx
---
code: |
  small_claims_answer_attachment.overflow_fields["merged_defenses_text"].overflow_trigger = 400
  small_claims_answer_attachment.overflow_fields["merged_defenses_text"].label = "More about defenses"
  small_claims_answer_attachment.overflow_fields["merged_counterclaims_text"].overflow_trigger = 400
  small_claims_answer_attachment.overflow_fields["merged_counterclaims_text"].label = "More about counterclaims"
  small_claims_answer_attachment.overflow_fields.gathered = True
---
# ALDocument objects specify the metadata for each template
objects:
  - small_claims_answer_Post_interview_instructions: ALDocument.using(title="NEXT STEPS - Instructions for filing these forms with the court", filename="small_claims_answer_next_steps.docx", enabled=True, has_addendum=False)
  - small_claims_answer_attachment: ALDocument.using(title="Small claims answer", filename="small_claims_answer", enabled=True, has_addendum=True, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - disclosure_of_exempt_income_attachment: ALDocument.using(title="Disclosure of exempt income", filename="disclosure_of_exempt_income", has_addendum=False, )
  - VT_fee_waiver_attachment: ALDocument.using(title="Vermont fee waiver form", filename="VT_fee_waiver.pdf", has_addendum=True, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
code: |
  if len(has_exempt_income_state.true_values()) > 0:
    disclosure_of_exempt_income_attachment.enabled = True
  elif len(has_exempt_income_other.true_values()) > 0:
    disclosure_of_exempt_income_attachment.enabled = True
  elif otherwise_exempt != '':
    disclosure_of_exempt_income_attachment.enabled = True
  else:
    disclosure_of_exempt_income_attachment.enabled = False
---
code: |
  if wants_to_fill_out_fee_waiver:
    VT_fee_waiver_attachment.enabled = True
  else:
    VT_fee_waiver_attachment.enabled = False
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[small_claims_answer_Post_interview_instructions, small_claims_answer_attachment, disclosure_of_exempt_income_attachment, VT_fee_waiver_attachment], filename="small_claims_answer", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[small_claims_answer_attachment, disclosure_of_exempt_income_attachment, VT_fee_waiver_attachment],  filename="small_claims_answer", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: small_claims_answer_next_steps
  docx template file: small_claims_answer_next_steps.docx
  variable name: small_claims_answer_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
  fields:
    - "sued_when_served": ${ sued_when_served }
    - "answer_deadline": ${ answer_deadline }
    - "address_county": ${ trial_court.address.county }
    - "division": ${ trial_court.division }
    - "name": ${ trial_court }
    - "address_address": ${ trial_court.address.address }
    - "address_unit": ${ trial_court.address.unit }
    - "address_city": ${ trial_court.address.city }
    - "address_state": ${ trial_court.address.state }
    - "address_zip": ${ trial_court.address.zip }
    - "arbitrary_attribute": ${ trial_court.arbitrary_attribute }
    - "phone": ${ trial_court.phone }
    - "email": ${ trial_court.email }
---
attachment:
  name: small claims answer
  filename: small_claims_answer
  variable name: small_claims_answer_attachment[i]
  skip undefined: True
  pdf template file: small_claims_answer.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county }
      - "docket_number": ${ docket_number }
      - "other_parties1_name": ${ other_parties.short_list(2) }
      - "users1_name": ${ users[0] }
      - "users1_address_on_one_line": ${ users[0].address.on_one_line() }
      - "users1_phone_number": ${ users[0].phone_number }
      - "users1_work_phone_number": ${ users[0].work_phone_number }
      - "users1_email": ${ users[0].email }
      - "agrees_with_complaint": |
          % if agrees_with_complaint:
          ${ True }
          % endif
      - "agrees_to_pay_in_full": ${ payment["agrees_to_pay_in_full"] }
      - "agrees_to_pay_installments": ${ payment["agrees_to_pay_installments"] }
      - "agrees_to_pay_installments_amount": ${ currency(agrees_to_pay_installments_amount) }
      - "agrees_to_pay_installments_period": ${ agrees_to_pay_installments_period.lower() }
      - "agrees_to_pay_installments_start_date": ${ agrees_to_pay_installments_start_date.format() }
      - "disagrees_with_complaint": |
          % if len(defenses.true_values()) > 0:
          ${ True }
          % endif
      - "disagrees_with_complaint_description": |
          ${ small_claims_answer_attachment.safe_value("merged_defenses_text") }
      - "has_exempt_income": |
          % if len(has_exempt_income_state.true_values()) > 0:
          ${ True }
          % elif len(has_exempt_income_other.true_values()) > 0:
          ${ True }
          % elif otherwise_exempt != '':
          ${ True }
          % else:
          ${ False }
          % endif
      - "has_counterclaim": |
          % if counterclaims_amount > 0:
          ${ True }
          % endif
      - "counterclaim_description": |
          % if sued_by_collection_agency:
          % if counterclaims_amount > 0:
          I have a counterclaim for ${ currency(counterclaims_amount)}. ${ small_claims_answer_attachment.safe_value("merged_counterclaims_text") } 
          % endif
          % endif
          % if not sued_by_collection_agency:
          % if counterclaims_amount > 0:
          I have a counterclaim for ${ currency(counterclaims_amount)}. ${ counterclaims_description }
          % endif
          % endif
      - "users1_name_1": ${ users[0] }
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }

---